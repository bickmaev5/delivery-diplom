schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

type auth0_profile {
  email: String!
  id: String!
  picture: String!
}

# columns and relationships of "cartItems"
type cartItems {
  cartId: uuid!
  createdAt: timestamptz!
  id: uuid!
  productId: Int!
  quantity: Int!
}

# aggregated selection of "cartItems"
type cartItems_aggregate {
  aggregate: cartItems_aggregate_fields
  nodes: [cartItems!]!
}

# aggregate fields of "cartItems"
type cartItems_aggregate_fields {
  avg: cartItems_avg_fields
  count(columns: [cartItems_select_column!], distinct: Boolean): Int!
  max: cartItems_max_fields
  min: cartItems_min_fields
  stddev: cartItems_stddev_fields
  stddev_pop: cartItems_stddev_pop_fields
  stddev_samp: cartItems_stddev_samp_fields
  sum: cartItems_sum_fields
  var_pop: cartItems_var_pop_fields
  var_samp: cartItems_var_samp_fields
  variance: cartItems_variance_fields
}

# order by aggregate values of table "cartItems"
input cartItems_aggregate_order_by {
  avg: cartItems_avg_order_by
  count: order_by
  max: cartItems_max_order_by
  min: cartItems_min_order_by
  stddev: cartItems_stddev_order_by
  stddev_pop: cartItems_stddev_pop_order_by
  stddev_samp: cartItems_stddev_samp_order_by
  sum: cartItems_sum_order_by
  var_pop: cartItems_var_pop_order_by
  var_samp: cartItems_var_samp_order_by
  variance: cartItems_variance_order_by
}

# input type for inserting array relation for remote table "cartItems"
input cartItems_arr_rel_insert_input {
  data: [cartItems_insert_input!]!

  # on conflict condition
  on_conflict: cartItems_on_conflict
}

# aggregate avg on columns
type cartItems_avg_fields {
  productId: Float
  quantity: Float
}

# order by avg() on columns of table "cartItems"
input cartItems_avg_order_by {
  productId: order_by
  quantity: order_by
}

# Boolean expression to filter rows from the table "cartItems". All fields are combined with a logical 'AND'.
input cartItems_bool_exp {
  _and: [cartItems_bool_exp!]
  _not: cartItems_bool_exp
  _or: [cartItems_bool_exp!]
  cartId: uuid_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  productId: Int_comparison_exp
  quantity: Int_comparison_exp
}

# unique or primary key constraints on table "cartItems"
enum cartItems_constraint {
  # unique or primary key constraint
  cartItems_pkey
}

# input type for incrementing numeric columns in table "cartItems"
input cartItems_inc_input {
  productId: Int
  quantity: Int
}

# input type for inserting data into table "cartItems"
input cartItems_insert_input {
  cartId: uuid
  createdAt: timestamptz
  id: uuid
  productId: Int
  quantity: Int
}

# aggregate max on columns
type cartItems_max_fields {
  cartId: uuid
  createdAt: timestamptz
  id: uuid
  productId: Int
  quantity: Int
}

# order by max() on columns of table "cartItems"
input cartItems_max_order_by {
  cartId: order_by
  createdAt: order_by
  id: order_by
  productId: order_by
  quantity: order_by
}

# aggregate min on columns
type cartItems_min_fields {
  cartId: uuid
  createdAt: timestamptz
  id: uuid
  productId: Int
  quantity: Int
}

# order by min() on columns of table "cartItems"
input cartItems_min_order_by {
  cartId: order_by
  createdAt: order_by
  id: order_by
  productId: order_by
  quantity: order_by
}

# response of any mutation on the table "cartItems"
type cartItems_mutation_response {
  # number of rows affected by the mutation
  affected_rows: Int!

  # data from the rows affected by the mutation
  returning: [cartItems!]!
}

# on conflict condition type for table "cartItems"
input cartItems_on_conflict {
  constraint: cartItems_constraint!
  update_columns: [cartItems_update_column!]!
  where: cartItems_bool_exp
}

# Ordering options when selecting data from "cartItems".
input cartItems_order_by {
  cartId: order_by
  createdAt: order_by
  id: order_by
  productId: order_by
  quantity: order_by
}

# primary key columns input for table: cartItems
input cartItems_pk_columns_input {
  id: uuid!
}

# select columns of table "cartItems"
enum cartItems_select_column {
  # column name
  cartId

  # column name
  createdAt

  # column name
  id

  # column name
  productId

  # column name
  quantity
}

# input type for updating data in table "cartItems"
input cartItems_set_input {
  cartId: uuid
  createdAt: timestamptz
  id: uuid
  productId: Int
  quantity: Int
}

# aggregate stddev on columns
type cartItems_stddev_fields {
  productId: Float
  quantity: Float
}

# order by stddev() on columns of table "cartItems"
input cartItems_stddev_order_by {
  productId: order_by
  quantity: order_by
}

# aggregate stddev_pop on columns
type cartItems_stddev_pop_fields {
  productId: Float
  quantity: Float
}

# order by stddev_pop() on columns of table "cartItems"
input cartItems_stddev_pop_order_by {
  productId: order_by
  quantity: order_by
}

# aggregate stddev_samp on columns
type cartItems_stddev_samp_fields {
  productId: Float
  quantity: Float
}

# order by stddev_samp() on columns of table "cartItems"
input cartItems_stddev_samp_order_by {
  productId: order_by
  quantity: order_by
}

# aggregate sum on columns
type cartItems_sum_fields {
  productId: Int
  quantity: Int
}

# order by sum() on columns of table "cartItems"
input cartItems_sum_order_by {
  productId: order_by
  quantity: order_by
}

# update columns of table "cartItems"
enum cartItems_update_column {
  # column name
  cartId

  # column name
  createdAt

  # column name
  id

  # column name
  productId

  # column name
  quantity
}

# aggregate var_pop on columns
type cartItems_var_pop_fields {
  productId: Float
  quantity: Float
}

# order by var_pop() on columns of table "cartItems"
input cartItems_var_pop_order_by {
  productId: order_by
  quantity: order_by
}

# aggregate var_samp on columns
type cartItems_var_samp_fields {
  productId: Float
  quantity: Float
}

# order by var_samp() on columns of table "cartItems"
input cartItems_var_samp_order_by {
  productId: order_by
  quantity: order_by
}

# aggregate variance on columns
type cartItems_variance_fields {
  productId: Float
  quantity: Float
}

# order by variance() on columns of table "cartItems"
input cartItems_variance_order_by {
  productId: order_by
  quantity: order_by
}

# columns and relationships of "catalog"
type catalog {
  description: String
  id: Int!
  name: String!

  # An array relationship
  products(
    # distinct select on columns
    distinct_on: [products_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [products_order_by!]

    # filter the rows returned
    where: products_bool_exp
  ): [products!]!

  # An aggregate relationship
  products_aggregate(
    # distinct select on columns
    distinct_on: [products_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [products_order_by!]

    # filter the rows returned
    where: products_bool_exp
  ): products_aggregate!
}

# aggregated selection of "catalog"
type catalog_aggregate {
  aggregate: catalog_aggregate_fields
  nodes: [catalog!]!
}

# aggregate fields of "catalog"
type catalog_aggregate_fields {
  avg: catalog_avg_fields
  count(columns: [catalog_select_column!], distinct: Boolean): Int!
  max: catalog_max_fields
  min: catalog_min_fields
  stddev: catalog_stddev_fields
  stddev_pop: catalog_stddev_pop_fields
  stddev_samp: catalog_stddev_samp_fields
  sum: catalog_sum_fields
  var_pop: catalog_var_pop_fields
  var_samp: catalog_var_samp_fields
  variance: catalog_variance_fields
}

# aggregate avg on columns
type catalog_avg_fields {
  id: Float
}

# Boolean expression to filter rows from the table "catalog". All fields are combined with a logical 'AND'.
input catalog_bool_exp {
  _and: [catalog_bool_exp!]
  _not: catalog_bool_exp
  _or: [catalog_bool_exp!]
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  products: products_bool_exp
}

# unique or primary key constraints on table "catalog"
enum catalog_constraint {
  # unique or primary key constraint
  catalog_pkey
}

# input type for incrementing numeric columns in table "catalog"
input catalog_inc_input {
  id: Int
}

# input type for inserting data into table "catalog"
input catalog_insert_input {
  description: String
  id: Int
  name: String
  products: products_arr_rel_insert_input
}

# aggregate max on columns
type catalog_max_fields {
  description: String
  id: Int
  name: String
}

# aggregate min on columns
type catalog_min_fields {
  description: String
  id: Int
  name: String
}

# response of any mutation on the table "catalog"
type catalog_mutation_response {
  # number of rows affected by the mutation
  affected_rows: Int!

  # data from the rows affected by the mutation
  returning: [catalog!]!
}

# input type for inserting object relation for remote table "catalog"
input catalog_obj_rel_insert_input {
  data: catalog_insert_input!

  # on conflict condition
  on_conflict: catalog_on_conflict
}

# on conflict condition type for table "catalog"
input catalog_on_conflict {
  constraint: catalog_constraint!
  update_columns: [catalog_update_column!]!
  where: catalog_bool_exp
}

# Ordering options when selecting data from "catalog".
input catalog_order_by {
  description: order_by
  id: order_by
  name: order_by
  products_aggregate: products_aggregate_order_by
}

# primary key columns input for table: catalog
input catalog_pk_columns_input {
  id: Int!
}

# select columns of table "catalog"
enum catalog_select_column {
  # column name
  description

  # column name
  id

  # column name
  name
}

# input type for updating data in table "catalog"
input catalog_set_input {
  description: String
  id: Int
  name: String
}

# aggregate stddev on columns
type catalog_stddev_fields {
  id: Float
}

# aggregate stddev_pop on columns
type catalog_stddev_pop_fields {
  id: Float
}

# aggregate stddev_samp on columns
type catalog_stddev_samp_fields {
  id: Float
}

# aggregate sum on columns
type catalog_sum_fields {
  id: Int
}

# update columns of table "catalog"
enum catalog_update_column {
  # column name
  description

  # column name
  id

  # column name
  name
}

# aggregate var_pop on columns
type catalog_var_pop_fields {
  id: Float
}

# aggregate var_samp on columns
type catalog_var_samp_fields {
  id: Float
}

# aggregate variance on columns
type catalog_variance_fields {
  id: Float
}

# Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

# mutation root
type mutation_root {
  # delete data from the table: "cartItems"
  delete_cartItems(
    # filter the rows which have to be deleted
    where: cartItems_bool_exp!
  ): cartItems_mutation_response

  # delete single row from the table: "cartItems"
  delete_cartItems_by_pk(id: uuid!): cartItems

  # delete data from the table: "catalog"
  delete_catalog(
    # filter the rows which have to be deleted
    where: catalog_bool_exp!
  ): catalog_mutation_response

  # delete single row from the table: "catalog"
  delete_catalog_by_pk(id: Int!): catalog

  # delete data from the table: "products"
  delete_products(
    # filter the rows which have to be deleted
    where: products_bool_exp!
  ): products_mutation_response

  # delete single row from the table: "products"
  delete_products_by_pk(id: Int!): products

  # delete data from the table: "shoppingCart"
  delete_shoppingCart(
    # filter the rows which have to be deleted
    where: shoppingCart_bool_exp!
  ): shoppingCart_mutation_response

  # delete single row from the table: "shoppingCart"
  delete_shoppingCart_by_pk(id: uuid!): shoppingCart

  # delete data from the table: "users"
  delete_users(
    # filter the rows which have to be deleted
    where: users_bool_exp!
  ): users_mutation_response

  # delete single row from the table: "users"
  delete_users_by_pk(id: String!): users

  # insert data into the table: "cartItems"
  insert_cartItems(
    # the rows to be inserted
    objects: [cartItems_insert_input!]!

    # on conflict condition
    on_conflict: cartItems_on_conflict
  ): cartItems_mutation_response

  # insert a single row into the table: "cartItems"
  insert_cartItems_one(
    # the row to be inserted
    object: cartItems_insert_input!

    # on conflict condition
    on_conflict: cartItems_on_conflict
  ): cartItems

  # insert data into the table: "catalog"
  insert_catalog(
    # the rows to be inserted
    objects: [catalog_insert_input!]!

    # on conflict condition
    on_conflict: catalog_on_conflict
  ): catalog_mutation_response

  # insert a single row into the table: "catalog"
  insert_catalog_one(
    # the row to be inserted
    object: catalog_insert_input!

    # on conflict condition
    on_conflict: catalog_on_conflict
  ): catalog

  # insert data into the table: "products"
  insert_products(
    # the rows to be inserted
    objects: [products_insert_input!]!

    # on conflict condition
    on_conflict: products_on_conflict
  ): products_mutation_response

  # insert a single row into the table: "products"
  insert_products_one(
    # the row to be inserted
    object: products_insert_input!

    # on conflict condition
    on_conflict: products_on_conflict
  ): products

  # insert data into the table: "shoppingCart"
  insert_shoppingCart(
    # the rows to be inserted
    objects: [shoppingCart_insert_input!]!

    # on conflict condition
    on_conflict: shoppingCart_on_conflict
  ): shoppingCart_mutation_response

  # insert a single row into the table: "shoppingCart"
  insert_shoppingCart_one(
    # the row to be inserted
    object: shoppingCart_insert_input!

    # on conflict condition
    on_conflict: shoppingCart_on_conflict
  ): shoppingCart

  # insert data into the table: "users"
  insert_users(
    # the rows to be inserted
    objects: [users_insert_input!]!

    # on conflict condition
    on_conflict: users_on_conflict
  ): users_mutation_response

  # insert a single row into the table: "users"
  insert_users_one(
    # the row to be inserted
    object: users_insert_input!

    # on conflict condition
    on_conflict: users_on_conflict
  ): users

  # update data of the table: "cartItems"
  update_cartItems(
    # increments the numeric columns with given value of the filtered values
    _inc: cartItems_inc_input

    # sets the columns of the filtered rows to the given values
    _set: cartItems_set_input

    # filter the rows which have to be updated
    where: cartItems_bool_exp!
  ): cartItems_mutation_response

  # update single row of the table: "cartItems"
  update_cartItems_by_pk(
    # increments the numeric columns with given value of the filtered values
    _inc: cartItems_inc_input

    # sets the columns of the filtered rows to the given values
    _set: cartItems_set_input
    pk_columns: cartItems_pk_columns_input!
  ): cartItems

  # update data of the table: "catalog"
  update_catalog(
    # increments the numeric columns with given value of the filtered values
    _inc: catalog_inc_input

    # sets the columns of the filtered rows to the given values
    _set: catalog_set_input

    # filter the rows which have to be updated
    where: catalog_bool_exp!
  ): catalog_mutation_response

  # update single row of the table: "catalog"
  update_catalog_by_pk(
    # increments the numeric columns with given value of the filtered values
    _inc: catalog_inc_input

    # sets the columns of the filtered rows to the given values
    _set: catalog_set_input
    pk_columns: catalog_pk_columns_input!
  ): catalog

  # update data of the table: "products"
  update_products(
    # increments the numeric columns with given value of the filtered values
    _inc: products_inc_input

    # sets the columns of the filtered rows to the given values
    _set: products_set_input

    # filter the rows which have to be updated
    where: products_bool_exp!
  ): products_mutation_response

  # update single row of the table: "products"
  update_products_by_pk(
    # increments the numeric columns with given value of the filtered values
    _inc: products_inc_input

    # sets the columns of the filtered rows to the given values
    _set: products_set_input
    pk_columns: products_pk_columns_input!
  ): products

  # update data of the table: "shoppingCart"
  update_shoppingCart(
    # sets the columns of the filtered rows to the given values
    _set: shoppingCart_set_input

    # filter the rows which have to be updated
    where: shoppingCart_bool_exp!
  ): shoppingCart_mutation_response

  # update single row of the table: "shoppingCart"
  update_shoppingCart_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: shoppingCart_set_input
    pk_columns: shoppingCart_pk_columns_input!
  ): shoppingCart

  # update data of the table: "users"
  update_users(
    # sets the columns of the filtered rows to the given values
    _set: users_set_input

    # filter the rows which have to be updated
    where: users_bool_exp!
  ): users_mutation_response

  # update single row of the table: "users"
  update_users_by_pk(
    # sets the columns of the filtered rows to the given values
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

# column ordering options
enum order_by {
  # in ascending order, nulls last
  asc

  # in ascending order, nulls first
  asc_nulls_first

  # in ascending order, nulls last
  asc_nulls_last

  # in descending order, nulls first
  desc

  # in descending order, nulls first
  desc_nulls_first

  # in descending order, nulls last
  desc_nulls_last
}

# columns and relationships of "products"
type products {
  # An object relationship
  catalog: catalog!
  catalog_id: Int!
  description: String!
  id: Int!
  name: String!
  picture: String
}

# aggregated selection of "products"
type products_aggregate {
  aggregate: products_aggregate_fields
  nodes: [products!]!
}

# aggregate fields of "products"
type products_aggregate_fields {
  avg: products_avg_fields
  count(columns: [products_select_column!], distinct: Boolean): Int!
  max: products_max_fields
  min: products_min_fields
  stddev: products_stddev_fields
  stddev_pop: products_stddev_pop_fields
  stddev_samp: products_stddev_samp_fields
  sum: products_sum_fields
  var_pop: products_var_pop_fields
  var_samp: products_var_samp_fields
  variance: products_variance_fields
}

# order by aggregate values of table "products"
input products_aggregate_order_by {
  avg: products_avg_order_by
  count: order_by
  max: products_max_order_by
  min: products_min_order_by
  stddev: products_stddev_order_by
  stddev_pop: products_stddev_pop_order_by
  stddev_samp: products_stddev_samp_order_by
  sum: products_sum_order_by
  var_pop: products_var_pop_order_by
  var_samp: products_var_samp_order_by
  variance: products_variance_order_by
}

# input type for inserting array relation for remote table "products"
input products_arr_rel_insert_input {
  data: [products_insert_input!]!

  # on conflict condition
  on_conflict: products_on_conflict
}

# aggregate avg on columns
type products_avg_fields {
  catalog_id: Float
  id: Float
}

# order by avg() on columns of table "products"
input products_avg_order_by {
  catalog_id: order_by
  id: order_by
}

# Boolean expression to filter rows from the table "products". All fields are combined with a logical 'AND'.
input products_bool_exp {
  _and: [products_bool_exp!]
  _not: products_bool_exp
  _or: [products_bool_exp!]
  catalog: catalog_bool_exp
  catalog_id: Int_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  picture: String_comparison_exp
}

# unique or primary key constraints on table "products"
enum products_constraint {
  # unique or primary key constraint
  products_pkey
}

# input type for incrementing numeric columns in table "products"
input products_inc_input {
  catalog_id: Int
  id: Int
}

# input type for inserting data into table "products"
input products_insert_input {
  catalog: catalog_obj_rel_insert_input
  catalog_id: Int
  description: String
  id: Int
  name: String
  picture: String
}

# aggregate max on columns
type products_max_fields {
  catalog_id: Int
  description: String
  id: Int
  name: String
  picture: String
}

# order by max() on columns of table "products"
input products_max_order_by {
  catalog_id: order_by
  description: order_by
  id: order_by
  name: order_by
  picture: order_by
}

# aggregate min on columns
type products_min_fields {
  catalog_id: Int
  description: String
  id: Int
  name: String
  picture: String
}

# order by min() on columns of table "products"
input products_min_order_by {
  catalog_id: order_by
  description: order_by
  id: order_by
  name: order_by
  picture: order_by
}

# response of any mutation on the table "products"
type products_mutation_response {
  # number of rows affected by the mutation
  affected_rows: Int!

  # data from the rows affected by the mutation
  returning: [products!]!
}

# on conflict condition type for table "products"
input products_on_conflict {
  constraint: products_constraint!
  update_columns: [products_update_column!]!
  where: products_bool_exp
}

# Ordering options when selecting data from "products".
input products_order_by {
  catalog: catalog_order_by
  catalog_id: order_by
  description: order_by
  id: order_by
  name: order_by
  picture: order_by
}

# primary key columns input for table: products
input products_pk_columns_input {
  id: Int!
}

# select columns of table "products"
enum products_select_column {
  # column name
  catalog_id

  # column name
  description

  # column name
  id

  # column name
  name

  # column name
  picture
}

# input type for updating data in table "products"
input products_set_input {
  catalog_id: Int
  description: String
  id: Int
  name: String
  picture: String
}

# aggregate stddev on columns
type products_stddev_fields {
  catalog_id: Float
  id: Float
}

# order by stddev() on columns of table "products"
input products_stddev_order_by {
  catalog_id: order_by
  id: order_by
}

# aggregate stddev_pop on columns
type products_stddev_pop_fields {
  catalog_id: Float
  id: Float
}

# order by stddev_pop() on columns of table "products"
input products_stddev_pop_order_by {
  catalog_id: order_by
  id: order_by
}

# aggregate stddev_samp on columns
type products_stddev_samp_fields {
  catalog_id: Float
  id: Float
}

# order by stddev_samp() on columns of table "products"
input products_stddev_samp_order_by {
  catalog_id: order_by
  id: order_by
}

# aggregate sum on columns
type products_sum_fields {
  catalog_id: Int
  id: Int
}

# order by sum() on columns of table "products"
input products_sum_order_by {
  catalog_id: order_by
  id: order_by
}

# update columns of table "products"
enum products_update_column {
  # column name
  catalog_id

  # column name
  description

  # column name
  id

  # column name
  name

  # column name
  picture
}

# aggregate var_pop on columns
type products_var_pop_fields {
  catalog_id: Float
  id: Float
}

# order by var_pop() on columns of table "products"
input products_var_pop_order_by {
  catalog_id: order_by
  id: order_by
}

# aggregate var_samp on columns
type products_var_samp_fields {
  catalog_id: Float
  id: Float
}

# order by var_samp() on columns of table "products"
input products_var_samp_order_by {
  catalog_id: order_by
  id: order_by
}

# aggregate variance on columns
type products_variance_fields {
  catalog_id: Float
  id: Float
}

# order by variance() on columns of table "products"
input products_variance_order_by {
  catalog_id: order_by
  id: order_by
}

type query_root {
  auth0: auth0_profile

  # An array relationship
  cartItems(
    # distinct select on columns
    distinct_on: [cartItems_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [cartItems_order_by!]

    # filter the rows returned
    where: cartItems_bool_exp
  ): [cartItems!]!

  # An aggregate relationship
  cartItems_aggregate(
    # distinct select on columns
    distinct_on: [cartItems_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [cartItems_order_by!]

    # filter the rows returned
    where: cartItems_bool_exp
  ): cartItems_aggregate!

  # fetch data from the table: "cartItems" using primary key columns
  cartItems_by_pk(id: uuid!): cartItems

  # fetch data from the table: "catalog"
  catalog(
    # distinct select on columns
    distinct_on: [catalog_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [catalog_order_by!]

    # filter the rows returned
    where: catalog_bool_exp
  ): [catalog!]!

  # fetch aggregated fields from the table: "catalog"
  catalog_aggregate(
    # distinct select on columns
    distinct_on: [catalog_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [catalog_order_by!]

    # filter the rows returned
    where: catalog_bool_exp
  ): catalog_aggregate!

  # fetch data from the table: "catalog" using primary key columns
  catalog_by_pk(id: Int!): catalog

  # An array relationship
  products(
    # distinct select on columns
    distinct_on: [products_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [products_order_by!]

    # filter the rows returned
    where: products_bool_exp
  ): [products!]!

  # An aggregate relationship
  products_aggregate(
    # distinct select on columns
    distinct_on: [products_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [products_order_by!]

    # filter the rows returned
    where: products_bool_exp
  ): products_aggregate!

  # fetch data from the table: "products" using primary key columns
  products_by_pk(id: Int!): products

  # fetch data from the table: "shoppingCart"
  shoppingCart(
    # distinct select on columns
    distinct_on: [shoppingCart_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [shoppingCart_order_by!]

    # filter the rows returned
    where: shoppingCart_bool_exp
  ): [shoppingCart!]!

  # fetch aggregated fields from the table: "shoppingCart"
  shoppingCart_aggregate(
    # distinct select on columns
    distinct_on: [shoppingCart_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [shoppingCart_order_by!]

    # filter the rows returned
    where: shoppingCart_bool_exp
  ): shoppingCart_aggregate!

  # fetch data from the table: "shoppingCart" using primary key columns
  shoppingCart_by_pk(id: uuid!): shoppingCart

  # fetch data from the table: "users"
  users(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): [users!]!

  # fetch aggregated fields from the table: "users"
  users_aggregate(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): users_aggregate!

  # fetch data from the table: "users" using primary key columns
  users_by_pk(id: String!): users
}

# columns and relationships of "shoppingCart"
type shoppingCart {
  # An array relationship
  cartItems(
    # distinct select on columns
    distinct_on: [cartItems_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [cartItems_order_by!]

    # filter the rows returned
    where: cartItems_bool_exp
  ): [cartItems!]!

  # An aggregate relationship
  cartItems_aggregate(
    # distinct select on columns
    distinct_on: [cartItems_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [cartItems_order_by!]

    # filter the rows returned
    where: cartItems_bool_exp
  ): cartItems_aggregate!
  created_at: timestamptz!
  id: uuid!
  userId: String!
}

# aggregated selection of "shoppingCart"
type shoppingCart_aggregate {
  aggregate: shoppingCart_aggregate_fields
  nodes: [shoppingCart!]!
}

# aggregate fields of "shoppingCart"
type shoppingCart_aggregate_fields {
  count(columns: [shoppingCart_select_column!], distinct: Boolean): Int!
  max: shoppingCart_max_fields
  min: shoppingCart_min_fields
}

# Boolean expression to filter rows from the table "shoppingCart". All fields are combined with a logical 'AND'.
input shoppingCart_bool_exp {
  _and: [shoppingCart_bool_exp!]
  _not: shoppingCart_bool_exp
  _or: [shoppingCart_bool_exp!]
  cartItems: cartItems_bool_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  userId: String_comparison_exp
}

# unique or primary key constraints on table "shoppingCart"
enum shoppingCart_constraint {
  # unique or primary key constraint
  shoppingCart_pkey
}

# input type for inserting data into table "shoppingCart"
input shoppingCart_insert_input {
  cartItems: cartItems_arr_rel_insert_input
  created_at: timestamptz
  id: uuid
  userId: String
}

# aggregate max on columns
type shoppingCart_max_fields {
  created_at: timestamptz
  id: uuid
  userId: String
}

# aggregate min on columns
type shoppingCart_min_fields {
  created_at: timestamptz
  id: uuid
  userId: String
}

# response of any mutation on the table "shoppingCart"
type shoppingCart_mutation_response {
  # number of rows affected by the mutation
  affected_rows: Int!

  # data from the rows affected by the mutation
  returning: [shoppingCart!]!
}

# on conflict condition type for table "shoppingCart"
input shoppingCart_on_conflict {
  constraint: shoppingCart_constraint!
  update_columns: [shoppingCart_update_column!]!
  where: shoppingCart_bool_exp
}

# Ordering options when selecting data from "shoppingCart".
input shoppingCart_order_by {
  cartItems_aggregate: cartItems_aggregate_order_by
  created_at: order_by
  id: order_by
  userId: order_by
}

# primary key columns input for table: shoppingCart
input shoppingCart_pk_columns_input {
  id: uuid!
}

# select columns of table "shoppingCart"
enum shoppingCart_select_column {
  # column name
  created_at

  # column name
  id

  # column name
  userId
}

# input type for updating data in table "shoppingCart"
input shoppingCart_set_input {
  created_at: timestamptz
  id: uuid
  userId: String
}

# update columns of table "shoppingCart"
enum shoppingCart_update_column {
  # column name
  created_at

  # column name
  id

  # column name
  userId
}

# Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  # does the column match the given case-insensitive pattern
  _ilike: String
  _in: [String!]

  # does the column match the given POSIX regular expression, case insensitive
  _iregex: String
  _is_null: Boolean

  # does the column match the given pattern
  _like: String
  _lt: String
  _lte: String
  _neq: String

  # does the column NOT match the given case-insensitive pattern
  _nilike: String
  _nin: [String!]

  # does the column NOT match the given POSIX regular expression, case insensitive
  _niregex: String

  # does the column NOT match the given pattern
  _nlike: String

  # does the column NOT match the given POSIX regular expression, case sensitive
  _nregex: String

  # does the column NOT match the given SQL regular expression
  _nsimilar: String

  # does the column match the given POSIX regular expression, case sensitive
  _regex: String

  # does the column match the given SQL regular expression
  _similar: String
}

type subscription_root {
  # An array relationship
  cartItems(
    # distinct select on columns
    distinct_on: [cartItems_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [cartItems_order_by!]

    # filter the rows returned
    where: cartItems_bool_exp
  ): [cartItems!]!

  # An aggregate relationship
  cartItems_aggregate(
    # distinct select on columns
    distinct_on: [cartItems_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [cartItems_order_by!]

    # filter the rows returned
    where: cartItems_bool_exp
  ): cartItems_aggregate!

  # fetch data from the table: "cartItems" using primary key columns
  cartItems_by_pk(id: uuid!): cartItems

  # fetch data from the table: "catalog"
  catalog(
    # distinct select on columns
    distinct_on: [catalog_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [catalog_order_by!]

    # filter the rows returned
    where: catalog_bool_exp
  ): [catalog!]!

  # fetch aggregated fields from the table: "catalog"
  catalog_aggregate(
    # distinct select on columns
    distinct_on: [catalog_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [catalog_order_by!]

    # filter the rows returned
    where: catalog_bool_exp
  ): catalog_aggregate!

  # fetch data from the table: "catalog" using primary key columns
  catalog_by_pk(id: Int!): catalog

  # An array relationship
  products(
    # distinct select on columns
    distinct_on: [products_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [products_order_by!]

    # filter the rows returned
    where: products_bool_exp
  ): [products!]!

  # An aggregate relationship
  products_aggregate(
    # distinct select on columns
    distinct_on: [products_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [products_order_by!]

    # filter the rows returned
    where: products_bool_exp
  ): products_aggregate!

  # fetch data from the table: "products" using primary key columns
  products_by_pk(id: Int!): products

  # fetch data from the table: "shoppingCart"
  shoppingCart(
    # distinct select on columns
    distinct_on: [shoppingCart_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [shoppingCart_order_by!]

    # filter the rows returned
    where: shoppingCart_bool_exp
  ): [shoppingCart!]!

  # fetch aggregated fields from the table: "shoppingCart"
  shoppingCart_aggregate(
    # distinct select on columns
    distinct_on: [shoppingCart_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [shoppingCart_order_by!]

    # filter the rows returned
    where: shoppingCart_bool_exp
  ): shoppingCart_aggregate!

  # fetch data from the table: "shoppingCart" using primary key columns
  shoppingCart_by_pk(id: uuid!): shoppingCart

  # fetch data from the table: "users"
  users(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): [users!]!

  # fetch aggregated fields from the table: "users"
  users_aggregate(
    # distinct select on columns
    distinct_on: [users_select_column!]

    # limit the number of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [users_order_by!]

    # filter the rows returned
    where: users_bool_exp
  ): users_aggregate!

  # fetch data from the table: "users" using primary key columns
  users_by_pk(id: String!): users
}

scalar timestamptz

# Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

# columns and relationships of "users"
type users {
  created_at: timestamptz!
  email: String
  id: String!
  last_seen: timestamptz
  name: String!
  phone: String
  picture: String
}

# aggregated selection of "users"
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

# aggregate fields of "users"
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

# Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  id: String_comparison_exp
  last_seen: timestamptz_comparison_exp
  name: String_comparison_exp
  phone: String_comparison_exp
  picture: String_comparison_exp
}

# unique or primary key constraints on table "users"
enum users_constraint {
  # unique or primary key constraint
  users_pkey
}

# input type for inserting data into table "users"
input users_insert_input {
  created_at: timestamptz
  email: String
  id: String
  last_seen: timestamptz
  name: String
  phone: String
  picture: String
}

# aggregate max on columns
type users_max_fields {
  created_at: timestamptz
  email: String
  id: String
  last_seen: timestamptz
  name: String
  phone: String
  picture: String
}

# aggregate min on columns
type users_min_fields {
  created_at: timestamptz
  email: String
  id: String
  last_seen: timestamptz
  name: String
  phone: String
  picture: String
}

# response of any mutation on the table "users"
type users_mutation_response {
  # number of rows affected by the mutation
  affected_rows: Int!

  # data from the rows affected by the mutation
  returning: [users!]!
}

# on conflict condition type for table "users"
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
  where: users_bool_exp
}

# Ordering options when selecting data from "users".
input users_order_by {
  created_at: order_by
  email: order_by
  id: order_by
  last_seen: order_by
  name: order_by
  phone: order_by
  picture: order_by
}

# primary key columns input for table: users
input users_pk_columns_input {
  id: String!
}

# select columns of table "users"
enum users_select_column {
  # column name
  created_at

  # column name
  email

  # column name
  id

  # column name
  last_seen

  # column name
  name

  # column name
  phone

  # column name
  picture
}

# input type for updating data in table "users"
input users_set_input {
  created_at: timestamptz
  email: String
  id: String
  last_seen: timestamptz
  name: String
  phone: String
  picture: String
}

# update columns of table "users"
enum users_update_column {
  # column name
  created_at

  # column name
  email

  # column name
  id

  # column name
  last_seen

  # column name
  name

  # column name
  phone

  # column name
  picture
}

scalar uuid

# Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

