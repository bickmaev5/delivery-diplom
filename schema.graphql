schema {
  query: query_root
  subscription: subscription_root
}

"""
columns and relationships of "catalog"
"""
type catalog {
  id: Int!
  name: String!

  """An array relationship"""
  products(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): [products!]!
}

"""
Boolean expression to filter rows from the table "catalog". All fields are combined with a logical 'AND'.
"""
input catalog_bool_exp {
  _and: [catalog_bool_exp!]
  _not: catalog_bool_exp
  _or: [catalog_bool_exp!]
  id: Int_comparison_exp
  name: String_comparison_exp
  products: products_bool_exp
}

"""Ordering options when selecting data from "catalog"."""
input catalog_order_by {
  id: order_by
  name: order_by
  products_aggregate: products_aggregate_order_by
}

"""
select columns of table "catalog"
"""
enum catalog_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "products"
"""
type products {
  """An object relationship"""
  catalog: catalog!
  catalog_id: Int!
  description: String!
  id: Int!
  name: String!
}

"""
order by aggregate values of table "products"
"""
input products_aggregate_order_by {
  avg: products_avg_order_by
  count: order_by
  max: products_max_order_by
  min: products_min_order_by
  stddev: products_stddev_order_by
  stddev_pop: products_stddev_pop_order_by
  stddev_samp: products_stddev_samp_order_by
  sum: products_sum_order_by
  var_pop: products_var_pop_order_by
  var_samp: products_var_samp_order_by
  variance: products_variance_order_by
}

"""
order by avg() on columns of table "products"
"""
input products_avg_order_by {
  catalog_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "products". All fields are combined with a logical 'AND'.
"""
input products_bool_exp {
  _and: [products_bool_exp!]
  _not: products_bool_exp
  _or: [products_bool_exp!]
  catalog: catalog_bool_exp
  catalog_id: Int_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""
order by max() on columns of table "products"
"""
input products_max_order_by {
  catalog_id: order_by
  description: order_by
  id: order_by
  name: order_by
}

"""
order by min() on columns of table "products"
"""
input products_min_order_by {
  catalog_id: order_by
  description: order_by
  id: order_by
  name: order_by
}

"""Ordering options when selecting data from "products"."""
input products_order_by {
  catalog: catalog_order_by
  catalog_id: order_by
  description: order_by
  id: order_by
  name: order_by
}

"""
select columns of table "products"
"""
enum products_select_column {
  """column name"""
  catalog_id

  """column name"""
  description

  """column name"""
  id

  """column name"""
  name
}

"""
order by stddev() on columns of table "products"
"""
input products_stddev_order_by {
  catalog_id: order_by
  id: order_by
}

"""
order by stddev_pop() on columns of table "products"
"""
input products_stddev_pop_order_by {
  catalog_id: order_by
  id: order_by
}

"""
order by stddev_samp() on columns of table "products"
"""
input products_stddev_samp_order_by {
  catalog_id: order_by
  id: order_by
}

"""
order by sum() on columns of table "products"
"""
input products_sum_order_by {
  catalog_id: order_by
  id: order_by
}

"""
order by var_pop() on columns of table "products"
"""
input products_var_pop_order_by {
  catalog_id: order_by
  id: order_by
}

"""
order by var_samp() on columns of table "products"
"""
input products_var_samp_order_by {
  catalog_id: order_by
  id: order_by
}

"""
order by variance() on columns of table "products"
"""
input products_variance_order_by {
  catalog_id: order_by
  id: order_by
}

type query_root {
  """
  fetch data from the table: "catalog"
  """
  catalog(
    """distinct select on columns"""
    distinct_on: [catalog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [catalog_order_by!]

    """filter the rows returned"""
    where: catalog_bool_exp
  ): [catalog!]!

  """fetch data from the table: "catalog" using primary key columns"""
  catalog_by_pk(id: Int!): catalog

  """An array relationship"""
  products(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): [products!]!

  """fetch data from the table: "products" using primary key columns"""
  products_by_pk(id: Int!): products
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "catalog"
  """
  catalog(
    """distinct select on columns"""
    distinct_on: [catalog_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [catalog_order_by!]

    """filter the rows returned"""
    where: catalog_bool_exp
  ): [catalog!]!

  """fetch data from the table: "catalog" using primary key columns"""
  catalog_by_pk(id: Int!): catalog

  """An array relationship"""
  products(
    """distinct select on columns"""
    distinct_on: [products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [products_order_by!]

    """filter the rows returned"""
    where: products_bool_exp
  ): [products!]!

  """fetch data from the table: "products" using primary key columns"""
  products_by_pk(id: Int!): products
}

